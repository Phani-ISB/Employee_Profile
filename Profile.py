# -*- coding: utf-8 -*-
"""Group-12_CT2_Neo4j_Profile Building.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dYZbtV39ag4o04KtBbpeUQgHXw6Kc1hK
"""

import streamlit as st
from neo4j import GraphDatabase
import networkx as nx
import matplotlib.pyplot as plt
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4
import io

# ----------------- CONFIG -----------------
NEO4J_URI = "neo4j+s://bbfdc97b.databases.neo4j.io"
NEO4J_USER = "neo4j"
NEO4J_PASSWORD = "SZqZdMT8Jzd9M-15McVNZB3_cQgvbJlpa2GjOjGMqXM"

driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))

# ----------------- FUNCTIONS -----------------

def get_all_employee_names():
    with driver.session() as session:
        result = session.run("MATCH (e:Employee) RETURN e.name AS name ORDER BY e.name")
        return [record["name"] for record in result]

def get_employee_profile(employee_name):
    query = """
    MATCH (e:Employee {name: $name})
    OPTIONAL MATCH (e)-[r]->(n)
    RETURN e, collect(DISTINCT r) AS rels, collect(DISTINCT n) AS nodes
    """
    with driver.session() as session:
        record = session.run(query, name=employee_name).single()
        if not record:
            return None, None, None

        e = record["e"]
        profile = {
            "employee_id": e.get("employee_id", "N/A"),
            "name": e.get("name", "N/A"),
            "role": e.get("role", "N/A"),
            "title": e.get("title", "N/A"),
            "level": e.get("level", "N/A"),
            "skills": [],
            "certifications": [],
            "projects": [],
            "clients": [],
            "awards": [],
            "publications": [],
            "conferences": [],
            "social_profiles": []
        }

        edges = []
        node_labels = {e.element_id: e.get("name", "Employee")}
        for node in record["nodes"]:
            label = node.get("name") or node.get("title") or list(node.labels)[0]
            node_labels[node.element_id] = label

            labels = list(node.labels)
            if "Skill" in labels:
                profile["skills"].append(label)
            elif "Certification" in labels:
                profile["certifications"].append(label)
            elif "Project" in labels:
                profile["projects"].append(label)
            elif "Client" in labels:
                profile["clients"].append(label)
            elif "Award" in labels:
                profile["awards"].append(label)
            elif "Publication" in labels:
                profile["publications"].append(label)
            elif "Conference" in labels:
                profile["conferences"].append(label)
            elif "SocialProfile" in labels:
                profile["social_profiles"].append(node.get("url") or label)

        for rel in record["rels"]:
            edges.append((rel.start_node.element_id, rel.end_node.element_id, rel.type))

        return profile, edges, node_labels

def draw_graph(edges, node_labels):
    if not edges:
        st.warning("No relationships found for this employee.")
        return
    G = nx.DiGraph()
    for start, end, r_type in edges:
        G.add_edge(start, end, label=r_type)
    pos = nx.spring_layout(G, seed=42)
    plt.figure(figsize=(10, 6))
    nx.draw(G, pos, with_labels=True, labels=node_labels, node_size=2500, node_color='skyblue', font_size=10)
    edge_labels = nx.get_edge_attributes(G, 'label')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8)
    st.pyplot(plt.gcf())

def generate_pdf(profile):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph(f"<b>{profile['name']} ({profile['employee_id']})</b>", styles["Title"]))
    story.append(Paragraph(f"{profile['role']} | {profile['title']} | Level {profile['level']}", styles["Heading2"]))
    story.append(Spacer(1, 12))

    for section in ["skills", "certifications", "projects", "clients", "awards", "publications", "conferences", "social_profiles"]:
        items = profile.get(section)
        if items:
            story.append(Paragraph(f"<b>{section.replace('_',' ').title()}:</b>", styles["Heading3"]))
            story.append(Paragraph(", ".join(items), styles["Normal"]))
            story.append(Spacer(1, 6))

    doc.build(story)
    buffer.seek(0)
    return buffer

# ----------------- STREAMLIT UI -----------------

st.title("Employee Profile Panel")

employees = get_all_employee_names()
if not employees:
    st.error("No employees found in the database.")
else:
    selected_employee = st.selectbox("Select an Employee", employees)
    if st.button("Fetch Profile"):
        profile, edges, node_labels = get_employee_profile(selected_employee)
        if profile:
            st.subheader(f"Profile: {profile['name']}")
            st.write(f"Role: {profile['role']} | Title: {profile['title']} | Level: {profile['level']}")

            st.subheader("Employee Graph")
            draw_graph(edges, node_labels)

            st.subheader("Download Resume PDF")
            pdf_buffer = generate_pdf(profile)
            st.download_button(
                label="Download PDF Resume",
                data=pdf_buffer,
                file_name=f"{profile['name'].replace(' ','_')}_Resume.pdf",
                mime="application/pdf"
            )
        else:
            st.warning("Employee not found.")



